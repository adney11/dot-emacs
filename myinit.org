
#+STARTIP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inhibit-compacting-font-caches t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* Personal Information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Adney Cardoza"
          user-mail-address "adney11@gmail.com")
  #+END_SRC
* general emacs settings
  #+BEGIN_SRC emacs-lisp
    (setq-default make-backup-files nil) ;; doesn't make backups
    (xterm-mouse-mode 1) ;; allows for mouse use
    (setq transient-mark-mode t)
    (setq scroll-step 1) ;; scrolls 1 line at a time
    (set-scroll-bar-mode `right)
    (add-to-list 'load-path "~/.emacs.d/ivylang/")

    ; Bright-red TODOs
    (setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
    (make-face 'font-lock-fixme-face)
    (make-face 'font-lock-note-face)
    (mapc (lambda (mode)
            (font-lock-add-keywords
             mode
             '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
               ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
          fixme-modes)
    (modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
    (modify-face 'font-lock-note-face "Dark Green" nil nil t nil t nil nil)
  #+END_SRC

  #+RESULTS:

* try
  Let's us try a particular package without actually installing it permanently
  #+BEGIN_SRC emacs-lisp
  (use-package try
  :ensure t)
  #+END_SRC

* which key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
  #+END_SRC
* org mode stuff
  #+BEGIN_SRC emacs-lisp
    ;; Org Mode stuff
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    (require 'ox-md)

    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)

    (setq org-html-validation-link nil)

    (defalias 'list-buffers 'ibuffer)
    ;; if you want in other window, then uncomment below line
    ;; (defalias 'list-buffers 'ibuffer-other-window)

    ; if you want tab bar
    ;(use-package tabbar
    ;  :ensure t
    ;  :config
    ;  (tabbar-mode 1))
  #+END_SRC

  #+RESULTS:
  : list-buffers

  Adding some custom todo states
  #+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
          '((sequence "TODO(t)" "ONGOING(o)" "SOMEDAY(s)" "DONE(d)")))
  #+END_SRC
* ace-window
  clean window package
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
    :ensure t
    :init
    (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
    '(aw-leading-char-face
    ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
  #+END_SRC
* reveal.js and org-reveal
  Allows for easy editting for reveal.js presentations
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure ox-reveal)

    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t)
    (use-package htmlize
      :ensure t)
  #+END_SRC

  #+RESULTS:

* code completion and search
  All packages required for clean search and code completion
  #+BEGIN_SRC emacs-lisp
  (use-package counsel
  :ensure t
  )

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
  ("C-r" . swiper)
  ("C-c C-r" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
         :config
         (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq ivy-display-style 'fancy)
         (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
         ))

         (use-package avy
         :ensure t
         :bind ("M-s" . avy-goto-char))

         (use-package auto-complete
         :ensure t
         :init
         (progn
         (ac-config-default)
         (global-auto-complete-mode t)
         ))
  #+END_SRC
* Themes and fonts
  various cosmetic preferences
  #+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
  #+END_SRC

* custom shortcuts
  #+BEGIN_SRC emacs-lisp
  (defun cpp-quick-compile()
  (interactive)
  (defvar foo)
  (setq foo (concat "g++ " (buffer-name)))
  (shell-command foo)
  )
  (global-set-key [(f6)] 'cpp-quick-compile)
  (global-set-key "\C-xw" 'delete-trailing-whitespace)
  (global-set-key "\C-xl" 'goto-line)

  ; Bind the "Control-x p" key sequence to the function "indent-all".
  ; The "indent-all" function indents all lines of the C program in the
  ; current buffer according to the selected indentation style.
  (defun indent-all()
  (interactive)
  (save-excursion
  (let ()
  (goto-char (point-min))
  (while (< (point) (point-max))
  (c-indent-command)
  (next-line 1))))
  (delete-trailing-whitespace))
  (global-set-key "\C-xp" 'indent-all)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-u" 'shell)
  (define-key global-map (kbd "RET") 'newline-and-indent)
  #+END_SRC

* Language Based settings
** Common
  #+BEGIN_SRC emacs-lisp
  (require 'linum)
  (global-set-key "\C-xn" 'linum-mode) ;; show/hide col numbers
  (electric-pair-mode 1) ;; auto-close brackets
  (setq-default show-trailing-whitespace t) ;; show trailing whitespace
  (setq column-number-mode t) ;; show col-no in status bar
  (global-font-lock-mode t) ;; turn on font highlighting
  (show-paren-mode t) ;; shows matching parenthesis highlighting
  #+END_SRC

  Code template binding - binding it to f7 to insert Python code template for now <2021-04-20 Tue>
  Will change for other languages later.
  #+BEGIN_SRC emacs-lisp
    (define-skeleton python-skeleton-starter
      "Inserts common imports and if __name__ line" nil
      "import os\n"
      "import sys\n"
      "import json\n"
      \n
      "if __name__ == '__main__':\n"
      > _)

    (global-set-key [f7] 'python-skeleton-starter)
  #+END_SRC

  #+RESULTS:
  : python-skeleton-starter

** C
   #+BEGIN_SRC emacs-lisp
   (setq-default c-basic-offset 4)
   (setq c-default-style "ellemtel")
   (defalias 'gdb 'gud-gdb)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp

     (setq casey-makescript "build.bat")
     (setq compilation-context-lines 0)
     (setq compilation-error-regexp-alist
         (cons '("^\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:fatal error\\|warnin\\(g\\)\\) C[0-9]+:" 2 3 nil (4))
          compilation-error-regexp-alist))

     (defun find-project-directory-recursive ()
       "Recursively search for a makefile."
       (interactive)
       (if (file-exists-p casey-makescript) t
           (cd "../")
           (find-project-directory-recursive)))

     (defun lock-compilation-directory ()
       "The compilation process should NOT hunt for a makefile"
       (interactive)
       (setq compilation-directory-locked t)
       (message "Compilation directory is locked."))

     (defun unlock-compilation-directory ()
       "The compilation process SHOULD hunt for a makefile"
       (interactive)
       (setq compilation-directory-locked nil)
       (message "Compilation directory is roaming."))

     (defun find-project-directory ()
       "Find the project directory."
       (interactive)
       (setq find-project-from-directory default-directory)
       (switch-to-buffer-other-window "*compilation*")
       (if compilation-directory-locked (cd last-compilation-directory)
       (cd find-project-from-directory)
       (find-project-directory-recursive)
       (setq last-compilation-directory default-directory)))

     (defun make-without-asking ()
       "Make the current build."
       (interactive)
       (if (find-project-directory) (compile casey-makescript))
       (other-window 1))
     (define-key global-map "\em" 'make-without-asking)

   #+END_SRC

   #+RESULTS:
   : make-without-asking

** Processing
   #+BEGIN_SRC emacs-lisp
   (use-package processing-mode
   :ensure t
   :config
   (progn
   (setq processing-location "C:/Users/AdneyLaptop/Desktop/processing-3.5.4/processing-java.exe")
   (setq processing-application-dir "C:/Users/AdneyLaptop/Desktop/processing-3.5.4/processing.exe")
   (setq processing-sketchbook-dir "C:/Adney/coding/ProcessingStuff")
   ))
   #+END_SRC
** Python
** Javascript
** ASM
   #+BEGIN_SRC emacs-lisp
   (require 'asm-mode)
   (defun my-custom-asm-mode()
   (interactive)
   (setq indent-tabs-mode nil)
   (setq tab-width 4)
   (setq tab-always-indent nil)
   (electric-indent-mode -1)
   (setq tab-stop-list '(4 12 50)))
   (add-hook 'asm-mode-hook 'my-custom-asm-mode)

   (define-key asm-mode-map (kbd "<ret>") 'newline-and-ident)
   (define-key asm-mode-map (kbd "M-.") 'helm-etags-select)
   #+END_SRC
* TODO rest
  #+BEGIN_SRC emacs-lisp

  ; Bind the Home and End keys for PuTTY.
  (global-set-key "\C-[[1~" 'beginning-of-line)
  (global-set-key "\C-[[4~" 'end-of-line)

  ; Bind the Home and End keys for the Linux GNOME Terminal.
  (global-set-key "\C-[OH" 'beginning-of-line)
  (global-set-key "\C-[OF" 'end-of-line)

  ;-----------------------------------------------------------------------

  ; Indent using spaces instead of tabs, but not in makefile-mode.
  (defun myIndentUsingSpaces () (setq indent-tabs-mode nil))
  (add-hook 'text-mode-hook 'myIndentUsingSpaces)
  (add-hook 'c-mode-hook 'myIndentUsingSpaces)
  (add-hook 'c++-mode-hook 'myIndentUsingSpaces)
  (add-hook 'asm-mode-hook 'myIndentUsingSpaces)
  (add-hook 'java-mode-hook 'myIndentUsingSpaces)
  (add-hook 'python-mode-hook 'myIndentUsingSpaces)
  (add-hook 'emacs-lisp-mode-hook 'myIndentUsingSpaces)

  ;-----------------------------------------------------------------------

  ; Open go-mode on opening .go files
  (add-to-list 'load-path "~/emacs/go-mode.el/")
  (autoload 'go-mode "go-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

  ;-----------------------------------------------------------------------

  ; Run go fmt on save for .go files
  (add-hook 'before-save-hook #'gofmt-before-save)

  #+END_SRC
* Startup tweaks
  Make emacs open todo.org on start
  #+BEGIN_SRC emacs-lisp
  (find-file "~/todo.org")
  #+END_SRC
* ivylang
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.ivy\\'" . ivylang-mode))
    (autoload 'ivylang-mode "ivylang-mode.el" "Major mode for editing Ivylang code" t)
  #+END_SRC

  #+RESULTS:
* testing
